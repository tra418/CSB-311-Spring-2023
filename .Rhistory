v4<-validator(total_amount>0)
v4
cf4<-confront(Yellow_Sample,v4,key="id")
out4<-as.data.frame(cf4)
# Now, to keep each validation rule and result clear...
names(out1)
names(out1)[3]<-"TD.LT.100"
names(out1)
names(out2)[3]<-"FARE.GE.0"
names(out3)[3]<-"FARE.LT.100000"
names(out4)[3]<-"AMT.GT.0"
# Now to merge the results of the confrontation with Yellow_Sample
# We'll start with "out1"....
YT_Sample_Validated <- merge(out1,Yellow_Sample, by.x="id",by.y="id")
head(YT_Sample_Validated,1)
# " ... and we'll use "subset" to drop "name" and "expression"...
YT_Sample_Validated <- subset(YT_Sample_Validated,select=-c(name,expression))
head(YT_Sample_Validated,1)
# Next, merge "out2" into our (working) merged data frame, YT_Sample_Validated....
YT_Sample_Validated <- merge(out2,YT_Sample_Validated, by.x="id",by.y="id")
YT_Sample_Validated <- subset(YT_Sample_Validated,select=-c(name,expression))
# Next, merge "out3" into our (working) merged data frame, YT_Sample_Validated....
YT_Sample_Validated <- merge(out3,YT_Sample_Validated, by.x="id",by.y="id")
YT_Sample_Validated <- subset(YT_Sample_Validated,select=-c(name,expression))
# Finally, merge "out4" into our (working) merged data frame, YT_Sample_Validated....
YT_Sample_Validated <- merge(out4,YT_Sample_Validated, by.x="id",by.y="id")
YT_Sample_Validated <- subset(YT_Sample_Validated,select=-c(name,expression))
# And let's take a look at what it looks like:
str(YT_Sample_Validated)
# Finally, save our validated data set for the next module...
save(YT_Sample_Validated,file=here("Data","YT_Sample_Validated.RData"))
## Dealing with data that needs to be changed and deleted
# Clear out Console and Enviroment
rm(list=ls(all=TRUE))
cat("\014")
DF <- read.csv(here("Data","PakistanSuicideAttacks Ver 11 (30-November-2017).csv"))
## Dealing with data that needs to be changed and deleted
# Clear out Console and Enviroment
rm(list=ls(all=TRUE))
cat("\014")
DF <- read.csv(here("Data","PakistanSuicideAttacks Ver 11 (30-November-2017).csv"))
setwd("~/Git Repos/Lehigh Troy/CSB-311-Spring-2023/Data")
DF <- read.csv("PakistanSuicideAttacks Ver 11 (30-November-2017).csv")
load("~/Git Repos/Lehigh Troy/CSB-311-Spring-2023/Data/PakistanSuicideAttacks.Rdata")
setwd("~/Git Repos/Lehigh Troy/CSB-311-Spring-2023")
class(DF)
typeof(DF)
# Put "DF" in path
attach(DF)
# Install and load tidyverse
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse)
# Using pipes
head(select(DF,Date,Time))
DF %>% select(Date, Time) %>% head
# dplyr function distinct
DF_deduped <- distinct(DF,Date,Time,Latitude,Longitude,.keep_all=TRUE)
# distinct() using pipes...
DF_deduped <- DF %>% distinct(Date,Time,Latitude,Longitude,.keep_all=TRUE)
# Using mutate() to do find and replace "N/A" with NA
DF_replaced <- mutate(DF_deduped,Time=replace(Time,Time=="N/A",NA))
# Replacing multiple variables/instances
DF_replaced <- mutate(DF_deduped,Time=replace(Time,Time=="N/A",NA),
Targeted.Sect.if.any=replace(Targeted.Sect.if.any,Targeted.Sect.if.any=="shiite","Shiite"),
Targeted.Sect.if.any=replace(Targeted.Sect.if.any,Targeted.Sect.if.any=="sunni","Sunni"),
Targeted.Sect.if.any=replace(Targeted.Sect.if.any,Targeted.Sect.if.any=="None",NA),
Targeted.Sect.if.any=replace(Targeted.Sect.if.any,Targeted.Sect.if.any=="",NA))
# So now pipes start to make sense
DF_replaced <- DF %>% distinct(Date,Time,Latitude,Longitude,.keep_all=TRUE) %>%
mutate(Time=replace(Time,Time=="N/A",NA),
Targeted.Sect.if.any=replace(Targeted.Sect.if.any,Targeted.Sect.if.any=="shiite","Shiite"),
Targeted.Sect.if.any=replace(Targeted.Sect.if.any,Targeted.Sect.if.any=="sunni","Sunni"),
Targeted.Sect.if.any=replace(Targeted.Sect.if.any,Targeted.Sect.if.any=="None",NA),
Targeted.Sect.if.any=replace(Targeted.Sect.if.any,Targeted.Sect.if.any=="",NA))
# One way to  capitalize is override regular expression usage and pass a Perl expression...
DF_capped <- DF_replaced %>%
mutate(City = sub("(.)", "\\U\\1", City, perl=TRUE))
# But we are using a program that allows us to cherry-pick functions from different packages
if (!require("R.utils")) install.packages("R.utils")
library(R.utils)
DF_capped <- DF_replaced %>% mutate(City = capitalize(City))
# Split the Day of the Week and the Date
DF1 <- DF_capped %>% separate(col=Date,into=c("Day of Week", "Date"),"-",extra="merge")
#Extract the Year
DF2 <- DF1 %>% mutate(Year=substr(Date, nchar(Date)-3, nchar(Date)),Date=substr(Date,1,nchar(Date)-5))
# Standardize the "Month-Day" portion by substituting blanks for dashes
DF2$Date <- gsub("-", " ", DF2$Date)
# Split the Month and the Day
DF3 <- DF2 %>% separate(col=Date,into=c("Month", "Day")," ",extra="merge")
# Replace alpha Month with Month Number
DF4 <- DF3 %>% mutate(Month=replace(Month,Month=="Jan",1),
Month=replace(Month,Month=="Feb",2),
Month=replace(Month,Month=="Mar",3),
Month=replace(Month,Month=="Apr",4),
Month=replace(Month,Month=="May",5),
Month=replace(Month,Month=="Jun",6),
Month=replace(Month,Month=="Jul",7),
Month=replace(Month,Month=="Aug",8),
Month=replace(Month,Month=="Sep",9),
Month=replace(Month,Month=="Oct",10),
Month=replace(Month,Month=="Nov",11),
Month=replace(Month,Month=="Dec",12),
Month=replace(Month,Month=="January",1),
Month=replace(Month,Month=="February",2),
Month=replace(Month,Month=="March",3),
Month=replace(Month,Month=="April",4),
Month=replace(Month,Month=="May",5),
Month=replace(Month,Month=="June",6),
Month=replace(Month,Month=="July",7),
Month=replace(Month,Month=="August",8),
Month=replace(Month,Month=="September",9),
Month=replace(Month,Month=="October",10),
Month=replace(Month,Month=="November",11),
Month=replace(Month,Month=="December",12))
# Re-order the columns to get the Date fields back together and to re-title some of the titles
DF5 = DF4 %>% select(S., "Day of Week", Day, Month, Year, Islamic.Date, Blast.Day.Type, Holiday.Type,
Time, City, Latitude, Longitude, Province, Location, Location.Category,
Location.Sensitivity,Open.Closed.Space, Influencing.Event.Event,
Target.Type, "Target.Sect.If.Any"=Targeted.Sect.if.any, Killed.Min, Killed.Max,
Injured.Min, Injured.Max, "No.of.Suicide.Blasts"=No..of.Suicide.Blasts,
"Explosive.Weight.Max"=Explosive.Weight..max.,Hospital.Names,
"Temperature.C"=Temperature.C., "Temperature.F"=Temperature.F.)
# Let's convert the Month, Day, and Year into numeric variables...
DF6 <- DF5 %>% mutate_at(c(3,4,5), as.numeric)
# Using pipes to do most of the last bit at once...
DF_cleaned <- DF2 %>% separate(col=Date,into=c("Month", "Day")," ",extra="merge") %>%
mutate(Month=replace(Month,Month=="Jan",1),
Month=replace(Month,Month=="Feb",2),
Month=replace(Month,Month=="Mar",3),
Month=replace(Month,Month=="Apr",4),
Month=replace(Month,Month=="May",5),
Month=replace(Month,Month=="Jun",6),
Month=replace(Month,Month=="Jul",7),
Month=replace(Month,Month=="Aug",8),
Month=replace(Month,Month=="Sep",9),
Month=replace(Month,Month=="Oct",10),
Month=replace(Month,Month=="Nov",11),
Month=replace(Month,Month=="Dec",12),
Month=replace(Month,Month=="January",1),
Month=replace(Month,Month=="February",2),
Month=replace(Month,Month=="March",3),
Month=replace(Month,Month=="April",4),
Month=replace(Month,Month=="May",5),
Month=replace(Month,Month=="June",6),
Month=replace(Month,Month=="July",7),
Month=replace(Month,Month=="August",8),
Month=replace(Month,Month=="September",9),
Month=replace(Month,Month=="October",10),
Month=replace(Month,Month=="November",11),
Month=replace(Month,Month=="December",12)) %>%
select(S., "Day of Week", Day, Month, Year, Islamic.Date, Blast.Day.Type, Holiday.Type,
Time, City, Latitude, Longitude, Province, Location, Location.Category,
Location.Sensitivity,Open.Closed.Space, Influencing.Event.Event,
Target.Type, "Target.Sect.If.Any"=Targeted.Sect.if.any, Killed.Min, Killed.Max,
Injured.Min, Injured.Max, "No.of.Suicide.Blasts"=No..of.Suicide.Blasts,
"Explosive.Weight.Max"=Explosive.Weight..max.,Hospital.Names,
"Temperature.C"=Temperature.C., "Temperature.F"=Temperature.F.) %>%
mutate_at(c(3,4,5), as.numeric)
# Using filter()to subset
DF_holidays <- DF_cleaned %>% filter(Blast.Day.Type=="Holiday")
# Using arrange()to sort
DF_sorted <- DF_cleaned %>% arrange(Target.Type,desc(Injured.Max))
# To convert Injured.Max to numeric, use mutate_at()...
str(DF_cleaned$Injured.Max)
# Rerunning the sort...
DF_sorted <- DF_cleaned %>% arrange(Target.Type,desc(Injured.Max))
# Using summarise()
DF_cleaned %>% group_by(Target.Type) %>%
summarise(mean=mean(Injured.Max), n=n())
# Using sample_n() and sample_frac()
SampleN <- sample_n(DF_cleaned, 20)
SampleP <- sample_frac(DF_cleaned, .1)
############################################################
# R script to accompany Intro to R for Business, Chapter 09#
# Written by Troy Adair                                    #
############################################################
library(here)
# Load the previously referenced data frame in "YT_Sample_Validated.RData"
load(here("Data","YT_Sample_Validated.RData"))
############################################################
# R script to accompany Intro to R for Business, Chapter 09#
# Written by Troy Adair                                    #
############################################################
# First, clear memory and the Console
rm(list=ls(all=TRUE))
cat("\014")
library(here)
# Load the previously referenced data frame in "YT_Sample_Validated.RData"
load(here("Data","YT_Sample_Validated.RData"))
# Install and load packages that seem to be dependencies of Rcmdr
if (!require("Rtools")) install.packages("Rtools")
library(Rtools)
# Let's try to run Rcmdr
if (!require("Rcmdr")) install.packages("Rcmdr")
library(Rcmdr)
# Load the previously referenced data frame in "YT_Sample_Validated.RData"
Scorecard <- read_csv(here("Data","most-recent-cohorts-all-data-elements-1.csv"))
# Load the previously referenced data frame in "YT_Sample_Validated.RData"
Scorecard <- read_csv(here("Data","most-recent-cohorts-all-data-elements-1.zip"))
str(Scorecard)
attach(Scorecard)
summary(HIGHDEG)
mean(HIGHDEG)
median(HIGHDEG)
max(HIGHDEG)
min(HIGHDEG)
sum(HIGHDEG)
sd(HIGHDEG)
var(HIGHDEG)
table(HIGHDEG)
n <- length(Scorecard$HIGHDEG)
for(i in 1:n) {
if(Scorecard$HIGHDEG[i]==0L) {
Scorecard$HDEGREE[i] <- "0 - Non-Degree"
} else if(Scorecard$HIGHDEG[i]==1L) {
Scorecard$HDEGREE[i] <- "1 - Certificate"
} else if(Scorecard$HIGHDEG[i]==2L) {
Scorecard$HDEGREE[i] <- "2 - Associate's"
} else if(Scorecard$HIGHDEG[i]==3L) {
Scorecard$HDEGREE[i] <- "3 - Bachelor's"
} else if(Scorecard$HIGHDEG[i]==4L) {
Scorecard$HDEGREE[i] <- "4 - Graduate"
} else{}
}
head(HDEGREE,10)
by(ADM_RATE,ITYPE,sd,na.rm=TRUE)
cor(PCIP27,SATMTMID)
str(PCIP27)
str(SATMTMID)
Scorecard$PCIP27 <- as.numeric(Scorecard$PCIP27)
Scorecard$SATMTMID <- as.numeric(Scorecard$SATMTMID)
attach(Scorecard)
cor(PCIP27,SATMTMID)
cor(PCIP27,SATMTMID,use="complete.obs")
cov(PCIP27,SATMTMID,use="complete.obs")
OLS <- lm(SATMTMID~PCIP27)
OLS
summary(OLS)
str(Scorecard)
cls <- c(LATITUDE="numeric",LONGITUDE="numeric", ADM_RATE="numeric",
ADM_RATE_ALL="numeric",SATVR25="numeric",SATVR75="numeric",SATMT25="numeric",
SATMT75="numeric",SATWR25="numeric",SATWR75="numeric",SATVRMID="numeric",
SATMTMID="numeric",SATWRMID="numeric",ACTCM25="numeric",ACTCM75="numeric",
ACTEN25="numeric",ACTEN75="numeric",ACTMT25="numeric",ACTMT75="numeric",
ACTWR25="numeric",ACTWR75="numeric",ACTCMMID="numeric",ACTENMID="numeric",
ACTMTMID="numeric",ACTWRMID="numeric",SAT_AVG="numeric",SAT_AVG_ALL="numeric",
PCIP01="numeric",PCIP03="numeric",PCIP04="numeric",PCIP05="numeric",
PCIP09="numeric",PCIP10="numeric",PCIP11="numeric",PCIP12="numeric",
PCIP13="numeric",PCIP14="numeric",PCIP15="numeric",PCIP16="numeric",
PCIP19="numeric",PCIP22="numeric",PCIP23="numeric",PCIP24="numeric",
PCIP25="numeric",PCIP26="numeric",PCIP27="numeric",PCIP29="numeric",
PCIP30="numeric",PCIP31="numeric",PCIP38="numeric",PCIP39="numeric",
PCIP40="numeric",PCIP41="numeric",PCIP42="numeric",PCIP43="numeric",
PCIP44="numeric",PCIP45="numeric",PCIP46="numeric",PCIP47="numeric",
PCIP48="numeric",PCIP49="numeric",PCIP50="numeric",PCIP51="numeric",
PCIP52="numeric",PCIP54="numeric")
head(cls)
temp <- read_csv("most-recent-cohorts-all-data-elements-1.csv", colClasses=cls,na.strings='NULL')
# Clear out Console and Enviroment
rm(list=ls(all=TRUE))
cat("\014")
library(here)
## Get subsample from YT_Sample_Validated ready for graphing
# Load the previously referenced data frame in
# "YT_Sample_Validated.RData", copy it to "DF",
# and remove "YT_Sample_Validated" from memory
load(here("Data","YT_Sample_Validated.RData"))
DF <- YT_Sample_Validated
rm(YT_Sample_Validated)
# Reform DF with only the "good" observations
DF<-DF[which(DF$total_amount >0 &
DF$fare_amount <100000 &
DF$fare_amount >= 0 &
DF$trip_distance < 100),]
# Reformat passenger_count as factor and store data frame as DF
DF$passenger_count <- as.factor(DF$passenger_count)
# Select a random subsample of 10,000 rows
set.seed(20)
index <- sample(1:nrow(DF), 10000, replace=FALSE)
# Copy the row numbers for the sample only into DF
DF <- DF[index,]
# To remind us what columns we have in DF
str(DF)
##################################################
cat("\014")
# Using R core plotting capabilities - Strip Charts
attach(DF)
stripchart(total_amount)
stripchart(total_amount,method="stack")
stripchart(total_amount,method="jitter")
?stripchart()
# Using R core plotting capabilities - Scatter Plots
plot(total_amount,trip_distance)
plot(total_amount,trip_distance,
main="NYC Taxi Rides - Relationship Between Trip Fare and Distance",
xlab="Total Fare",
ylab="Trip Distance")
# Using R core plotting capabilities - Histograms
hist(total_amount)
hist(total_amount,main="Distribution of Total Amount Paid",xlab="Amt Paid")
# Using R core plotting capabilities - Boxplots
boxplot(total_amount)
boxplot(tolls_amount)
boxplot(mta_tax)
boxplot(total_amount,
main='Total Fares for NYC Yellow Taxi Rides',
ylab='Fare')
# Install and load ggplot2 package
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
# Using ggplot2
ggplot(data = DF)
ggplot(data = DF)+geom_histogram(aes(x=total_amount))
ggplot(data = DF)+geom_density(aes(x=total_amount),fill='grey50')
ggplot(data=DF) +
geom_histogram(binwidth=5, aes(x=total_amount)) +
ggtitle("Total Fare Distribution") +
xlab("Fare") +
ylab("Frequency")
ggplot(data=DF) +
geom_histogram(binwidth=5, aes(x=total_amount)) +
ggtitle("Total Fare Distribution") +
xlab("Fare") +
ylab("Frequency") +
theme_minimal()
ggplot(data=DF) +
geom_histogram(binwidth=5, aes(x=total_amount)) +
ggtitle("Total Fare Distribution") +
xlab("Fare") +
ylab("Frequency") +
theme_minimal() +
xlim(0,100)
ggplot(data=DF) +
geom_histogram(binwidth=5, aes(x=total_amount)) +
ggtitle("Total Fare Distribution") +
xlab("Fare") +
ylab("Frequency") +
theme_minimal() +
xlim(0,100) +
facet_wrap(~passenger_count)
ls(pattern = '^geom_', env = as.environment('package:ggplot2'))
# Scatter plots with ggplot2:
ggplot(data=DF,
mapping=aes(x=total_amount,
y=trip_distance)) +
geom_point() +
ggtitle("Fare Amount vs. Trip Distance") +
xlab("Fare") +
ylab("Distance") +
theme_minimal() +
scale_x_continuous(labels=scales::dollar_format())
# Same as:
p <- ggplot(data=DF,
mapping=aes(x=total_amount,
y=trip_distance))
p + geom_point() +
ggtitle("Fare Amount vs. Trip Distance") +
xlab("Fare") +
ylab("Distance") +
theme_minimal() +
scale_x_continuous(labels=scales::dollar_format())
p + geom_point() +
ggtitle("Fare Amount vs. Trip Distance") +
xlab("Fare") +
ylab("Distance") +
theme_minimal() +
scale_x_continuous(labels=scales::dollar_format()) +
geom_smooth()
p + geom_point() +
ggtitle("Fare Amount vs. Trip Distance") +
xlab("Fare") +
ylab("Distance") +
theme_minimal() +
scale_x_continuous(labels=scales::dollar_format()) +
geom_smooth(method="lm")
# Histograms with ggplot2:
ggplot(data=DF) +
geom_histogram(binwidth=5, aes(x=total_amount)) +
ggtitle("Total Fare Distribution") +
xlab("Fare") +
ylab("Frequency") +
theme_minimal()
ggplot(data=DF) +
geom_boxplot(aes(x=total_amount)) +
ggtitle("Total Fare Distribution") +
xlab("Fare") +
ylab("Frequency") +
theme_minimal()
ggplot(data=DF) +
geom_density(aes(x=total_amount)) +
ggtitle("Total Fare Distribution") +
xlab("Fare") +
ylab("Frequency") +
theme_minimal()
ggplot(data=DF) +
geom_violin(aes(x=total_amount,y=trip_distance)) +
ggtitle("Total Fare Distribution") +
xlab("Fare") +
ylab("Frequency") +
theme_minimal()
p <- ggplot(data = DF,
mapping = aes(x = trip_distance,
y = total_amount))
p + geom_point(mapping=aes(group = passenger_count,
color=passenger_count)) +
geom_smooth(aes(group=passenger_count, color=passenger_count),
method = "nls", formula = y ~ a * x + b, se = F,
method.args = list(start = list(a = 0.1, b = 0.1))) +
labs(x = "Trip Distance",
y = "Total Amount",
title = "Total Fare vs. Trip Distance by Passenger Count") +
xlim(0,25) +
ylim(0,150)
ggplot(data=DF) +
geom_bar(aes(x=payment_type,fill=passenger_count)) +
ggtitle("Passenger Counts by Payment Type") +
xlab("Payment Type") +
ylab("Frequency") +
theme_minimal() +
xlim(0,3)
ggplot(data=DF) +
geom_bar(aes(x=total_amount,fill=passenger_count)) +
ggtitle("Fare Distribution Between $0 and $25") +
xlab("Fare") +
ylab("Frequency") +
theme_minimal() +
xlim(0,25)
ggplot(data=DF) +
geom_bar(aes(x=total_amount,fill=passenger_count)) +
ggtitle("Fare Distribution Between $0 and $10 by Passenger Count") +
xlab("Fare") +
ylab("Frequency") +
theme_minimal() +
facet_wrap(~passenger_count) +
xlim(0,10)
# Clear out Console and Enviroment
rm(list=ls(all=TRUE))
cat("\014")
library(here)
## Get subsample from YT_Sample_Validated ready for graphing
# Load the previously referenced data frame in
# "YT_Sample_Validated.RData", copy it to "DF",
# and remove "YT_Sample_Validated" from memory
load(here("Data","YT_Sample_Validated.RData"))
DF <- YT_Sample_Validated
rm(YT_Sample_Validated)
# Reform DF with only the "good" observations
DF<-DF[which(DF$total_amount >0 &
DF$fare_amount <100000 &
DF$fare_amount >= 0 &
DF$trip_distance < 100),]
# Reformat passenger_count as factor and store data frame as DF
DF$passenger_count <- as.factor(DF$passenger_count)
# Select a random subsample of 10,000 rows
set.seed(10)
index <- sample(1:nrow(DF), 10000, replace=FALSE)
# Copy the row numbers for the sample only into DF
DF <- DF[index,]
# Install and load ggplot2 package
if (!require("ggplot2")) install.packages("ggplot2")
library(ggplot2)
# Data set "diamonds" comes in ggplot2
data(diamonds)
dim(diamonds)
names(diamonds)
# Using R core plotting capabilities
plot (price ~ carat, data=diamonds)
plot(diamonds$carat, diamonds$price)
boxplot(diamonds$carat)
hist(diamonds$carat, main="Carat Histogram", xlab="Carat")
# Using ggplot2
ggplot(data = diamonds)
ggplot(data = diamonds)+geom_histogram(aes(x=carat))
ggplot(data = diamonds)+geom_density(aes(x=carat),fill='grey50')
ggplot(data=diamonds) +
geom_histogram(binwidth=500, aes(x=diamonds$price)) +
ggtitle("Diamond Price Distribution") +
xlab("Diamond Price U$") +
ylab("Frequency") +
theme_minimal()
ggplot(data=diamonds) +
geom_histogram(binwidth=500, aes(x=diamonds$price)) +
ggtitle("Diamond Price Distribution") +
xlab("Diamond Price U$ - Binwidth 500") +
ylab("Frequency") +
theme_minimal() +
xlim(0,2500)
ggplot(data=diamonds) +
geom_histogram(binwidth=100, aes(x=diamonds$price)) +
ggtitle("Diamond Price Distribution") +
xlab("Diamond Price U$- Binwidth 50") +
ylab("Frequency") +
theme_minimal() +
xlim(0,2500)
ggplot(data=diamonds) +
geom_histogram(binwidth=100, aes(x=diamonds$price)) +
ggtitle("Diamond Price Distribution by Cut") +
xlab("Diamond Price U$") +
ylab("Frequency") +
theme_minimal() +
facet_wrap(~cut)
ls(pattern = '^geom_', env = as.environment('package:ggplot2'))
help(aes)
# Package devtools will be used to install latest ggplotgui
# from GitHub
if (!require("devtools")) install.packages("devtools")
library(devtools)
# Installing latest ggplotgui p[ackage from GitHub]
if (!require("ggplotgui")) devtools::install_github("gertstulp/ggplotgui")
library(ggplotgui)
# Running ggplot_shiny() with our data
ggplot_shiny(DF)
