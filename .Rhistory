library(ggplotgui)
# Running ggplot_shiny() with our data
ggplot_shiny(DF)
# R script to accompany Intro to R for Business, Chapter 05#
# R script to accompany Intro to R for Business, Chapter 05#
# Numeric
x = 7
# Use better assignment operator
y <- 8
# Using "=" for all things
relationship = lm(formula=y~x)
# Using "<-" for assignment
relationship <- lm(formula=y~x)
# Display value of x in console
x
# Looking at the attributes of X
class(x)
typeof(x)
length(x)
attributes(x)
# Assigning a value as an integer
y <- 8L
# Display value of x in console
x
# Looking at the attributes of X
class(x)
typeof(x)
length(x)
attributes(x)
# Assigning a value as an integer
y <- 8L
class (y)
# Converting a numeric value to an integer
y <- 8
# Converting a numeric value to an integer
y <- 8
class(y)
typeof(y)
y <- as.integer(y)
class(y)
typeof(y)
# How to programmatically clear console
cat("\014")
# Character
Name <- "Troy"
class(Name)
typeof(Name)
length(Name)
# Logical
CheckFlag <- T
class(CheckFlag)
typeof(CheckFlag)
# Integer
y
class(y)
typeof(y)
#date()
DateTime <- date()
class(DateTime)
typeof(DateTime)
#Sys.Date
Date <- Sys.Date()
class(Date)
typeof(Date)
#Differences in dates
AgeDays = as.double(Sys.Date() - as.Date("2000-01-01"))
AgeYears = AgeDays/365
#Sys.time
Time <- Sys.time()
class(Time)
typeof(Time)
# Programmatically clear the Console
cat("\014")
# How to programmatically remove all variables from Environment
rm(list=ls(all=TRUE))
# Assign two numbers to variables
x <- 100
y <- 250
z1 <- X + y
z1 <- x + y
z1
z2 <- x - y
z2
z3 <- x * y
z3
z4 <- x / y
z4
z5 <- x ** y
z5
z6 <- x ^ y
z6
# Programmatically remove all variables from Environment
rm(list=ls(all=TRUE))
# Programmatically clear the Console
cat("\014")
Name1 <- "Sirah"
Name2 <- "Johann"
Name3 <- "Yu"
Name <- c(Name1, Name2, Name3)
name <- c("Mike", "Lucy", "John")
name
name[1]
name[2:3]
name[c(1,3)]
# For checking presence:
"Lucy" %in% name
any("Lucy"==name)
is.element("Lucy", name)
# For finding first occurance:
match("Lucy", name)
# For finding all occurances as vector of indices:
which("Lucy" == name)
"Lucy" == name
# Numeric Vectors and Vector Math
X <- c(1, 3, 5, 7, 9, 11)
X*3
sqrt(X)
Y <- c(2,4,6,8,10,12)
X-Y
Z <- c(0,2,4)
X-Z
Z2 <- c(0,1,2,3)
X-Z2
# Date Vectors
# Use as.Date( ) to convert strings to dates
mydates <- as.Date(c("2007-06-22", "2004-02-13"))
mydates
typeof(mydates)
# Count number of days between 6/22/07 and 2/13/04
days <- mydates[1] - mydates[2]
days
# Missing Data in R
Z <- c(2, NA, 6, 8, NA, 12)
Z
is.na(Z)
Z <- c(2, NULL, 6, 8, NA, 12)
Z
is.na(Z)
# Useful Vector Functions....
nchar(name)
length(X)
mean(X)
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
# 2-dimensional arrays
theArray2d <- array(1:9, dim=c(3,3))
View(theArray2d)
theArray2d[1,2]
# 3-dimensional arrays
theArray3d <- array(1:27, dim=c(3,3,3))
theArray3d[1,2,3]
View(theArray3d)
# 3-dimensional arrays
theArray3d <- array(1:27, dim=c(3,3,3))
theArray3d[1,2,3]
View(theArray3d)
# Matrices
theMatrix <- matrix(1:6, nrow=2)
View(theMatrix)
# Matrix with byrow
theMatrix <- matrix(1:6, nrow=2, byrow=TRUE)
# Lists
y <- list("a", 1L, 1.5, TRUE)
y[3]
class(y)
y
typeof(y)
#Display the structure of an R object
str(y)
?str()
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
# Data Frames
x <- 10:1
y <- -4:5
z <- c('Hockey', 'Football', 'Curling', 'Soccer', 'Rugby', 'Baseball', 'Golf', 'Basketball', 'Wrestling', 'Tennis')
theDF <- data.frame(x,y,z)
theDF
str(theDF)
theDF[1,2]
View(theDF)
# Using names
theDF$x
theDF$x[3]
# Editing names
names(theDF)<-c("Popularity", "Team Strength", "Sport")
# Summary of referencing data frame elements
theDF[2:3]
theDF[c(1,3)]
theDF[3]
theDF$Sport
theDF["Sport"]
theDF$"Team Strength"
## Going to be reading in a lot of data, so let's empty Environment
## and clean up Console
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
## Reading in external data
## Prior to attempting this section, download file
## "yellow-tripdata_2017-06.csv" from the link on intro-to-r.com
## and store it in the /Data subfolder for this project.
if (!require("here")) install.packages("here")
library("here")
# Importing the file and measuring how long the import takes
### Run as a block of text to time #########
ptm <- proc.time()
DF <- read.csv(here("Data","yellow_tripdata_2017-06.csv"))
CSV_READ_TIME <- (proc.time() - ptm)
CSV_READ_TIME
## Reading in our csv file using fread() from package data.table
# Installing data.table (if required) and loading it into memory
if (!require("data.table")) install.packages("data.table")
library("data.table")
#Checking and setting number of cpu threads
getDTthreads()
getDTthreads(verbose=TRUE)
setDTthreads(0)
getDTthreads()
# Doing a timed read of the same file with fread()
### Run as a block of text to time #########
ptm <- proc.time()
ptm <- proc.time()
DF <- fread(here("Data","yellow_tripdata_2017-06.csv"), header="auto",
data.table=FALSE)
FREAD_READ_TIME <- (proc.time() - ptm)
FREAD_READ_TIME
View(DF)
ptm <- proc.time()
header <- read.table(here("Data","yellow_tripdata_2017-06.csv"), header = TRUE,
sep=",", nrow = 1)
DF <- fread(here("Data","yellow_tripdata_2017-06.csv"), skip=1, sep=",",
header=FALSE, data.table=FALSE)
setnames(DF, colnames(header))
rm(header)
FREAD_READ_TIME <- (proc.time() - ptm)
FREAD_READ_TIME
############################################
names(DF)
for(i in 1:getDTthreads()) {
setDTthreads(i)
print(getDTthreads())
ptm <- proc.time()
header <- read.table(here("Data","yellow_tripdata_2017-06.csv"), header = TRUE,
sep=",", nrow = 1)
DF <- fread(here("Data","yellow_tripdata_2017-06.csv"), skip=1, sep=",",
header=FALSE, data.table=FALSE,
showProgress=FALSE)
setnames(DF, colnames(header))
rm(header)
print(proc.time() - ptm)
gc()
}
# Installing readr (if required) and loading it into memory
if (!require("readr")) install.packages("readr")
library("readr")
# A timed example of readr::read_csv()
### Run as a block of text to time #########
ptm <- proc.time()
DF <- read_csv(here("Data","yellow_tripdata_2017-06.csv"), col_names=TRUE)
READR_READ_TIME <- (proc.time() - ptm)
READR_READ_TIME
CSV_READ_TIME
FREAD_READ_TIME
# We've picked a winner: let's run with it.
rm(list=ls(all=TRUE))
cat("\014")
header <- read.table(here("Data","yellow_tripdata_2017-06.csv"), header = TRUE,
sep=",", nrow = 1)
Yellow_Tripdata_2017_06 <- fread(here("Data","yellow_tripdata_2017-06.csv"),
skip=1, sep=",",header=FALSE,
data.table=FALSE)
setnames(Yellow_Tripdata_2017_06, colnames(header))
rm(header)
str(Yellow_Tripdata_2017_06)
# Using head()
head(Yellow_Tripdata_2017_06)
head(Yellow_Tripdata_2017_06, n=3)
head(Yellow_Tripdata_2017_06$trip_distance, n=10)
head(Yellow_Tripdata_2017_06[4:5])
# Using summary()
summary(Yellow_Tripdata_2017_06)
summary(Yellow_Tripdata_2017_06 $ trip_distance)
#
# Throwing out "non-fares"
Yellow_Tripdata_2017_06 <- Yellow_Tripdata_2017_06[which(
Yellow_Tripdata_2017_06$fare_amount>=0 &
Yellow_Tripdata_2017_06$fare_amount<100000),]
summary(Yellow_Tripdata_2017_06 $ fare_amount)
# Constraining passenger_count to = 1 or 2
Yellow_Tripdata_2017_06<-Yellow_Tripdata_2017_06[which(
Yellow_Tripdata_2017_06$passenger_count==1 |
Yellow_Tripdata_2017_06$passenger_count==2),]
summary(Yellow_Tripdata_2017_06 $ passenger_count)
# Using data.table:fwrite()to save our curated data as csv:
fwrite(Yellow_Tripdata_2017_06,"Yellow_Curated.csv")
# First, clear memory and the Console
rm(list=ls(all=TRUE))
cat("\014")
# Re-read the csv:
header <- read.table(here("Data","yellow_tripdata_2017-06.csv"), header = TRUE,
sep=",", nrow = 1)
DF <- fread(here("Data","yellow_tripdata_2017-06.csv"),
skip=1, sep=",",header=FALSE,
data.table=FALSE)
setnames(DF, colnames(header))
rm(header)
# Save the "bad" observations so we can clean them out
# in the next chapter
DF2<-DF[which(DF$total_amount<=0 |
DF$fare_amount >=100000 |
DF$fare_amount < 0 |
DF$trip_distance >= 100),]
# Reform DF with only the "good" observations
DF<-DF[which(DF$total_amount >0 &
DF$fare_amount <100000 &
DF$fare_amount >= 0 &
DF$trip_distance < 100),]
# Select a random subsample of 1,000,000 rows
set.seed(10)
index <- sample(1:nrow(DF), 1000000, replace=FALSE)
# Look at the index to see it's just row numbers
head(index)
# Copy the row numbers for the sample only into Yellow_Sample
Yellow_Sample <- DF[index,]
# Concatenate (or "bind") the random sample and the "bad" ones
Yellow_Sample <- rbind(DF2,Yellow_Sample)
# Save the data frame as an R data file
save(Yellow_Sample,file=here("Data","Yellow_Sample.RData"))
`PakistanSuicideAttacks.Ver.11.(30.November.2017)` <- read.csv("~/Git Repos/Lehigh Troy/CSB-311-Spring-2023/Data/PakistanSuicideAttacks Ver 11 (30-November-2017).csv")
library(readr)
PakistanSuicideAttacks_Ver_11_30_November_2017_ <- read_csv("Data/PakistanSuicideAttacks Ver 11 (30-November-2017).csv")
View(PakistanSuicideAttacks_Ver_11_30_November_2017_)
theDF[c(1,3)]
theDF[3]
# Numeric
x = 7
# Use better assignment operator
y <- 8
# Using "=" for all things
relationship = lm(formula=y~x)
# Using "<-" for assignment
relationship <- lm(formula=y~x)
# Display value of x in console
x
# Display value of x in console
x
# Looking at the attributes of X
class(x)
typeof(x)
length(x)
attributes(x)
# Assigning a value as an integer
y <- 8L
class (y)
# Converting a numeric value to an integer
y <- 8
class(y)
typeof(y)
y <- as.integer(y)
class(y)
typeof(y)
# How to programmatically clear console
cat("\014")
# Character
Name <- "Troy"
class(Name)
typeof(Name)
length(Name)
# Logical
CheckFlag <- T
class(CheckFlag)
typeof(CheckFlag)
# Integer
y
class(y)
typeof(y)
#date()
DateTime <- date()
class(DateTime)
typeof(DateTime)
#Sys.Date
Date <- Sys.Date()
class(Date)
typeof(Date)
AgeYears = AgeDays/365
#Differences in dates
AgeDays = as.double(Sys.Date() - as.Date("2000-01-01"))
AgeYears = AgeDays/365
#Sys.time
Time <- Sys.time()
class(Time)
typeof(Time)
# Programmatically clear the Console
cat("\014")
# How to programmatically remove all variables from Environment
rm(list=ls(all=TRUE))
# Assign two numbers to variables
x <- 100
y <- 250
z1 <- X + y
z1 <- x + y
z1
z2 <- x - y
z2
z3 <- x * y
z3
z4 <- x / y
z4
z5 <- x ** y
z5
z6 <- x ^ y
z6
# Programmatically remove all variables from Environment
rm(list=ls(all=TRUE))
# Programmatically clear the Console
cat("\014")
Name1 <- "Sirah"
Name2 <- "Johann"
Name3 <- "Yu"
Name <- c(Name1, Name2, Name3)
name <- c("Mike", "Lucy", "John")
name
name[1]
name[2:3]
name[c(1,3)]
# For checking presence:
"Lucy" %in% name
any("Lucy"==name)
is.element("Lucy", name)
# For finding first occurance:
match("Lucy", name)
# For finding all occurances as vector of indices:
which("Lucy" == name)
"Lucy" == name
# Numeric Vectors and Vector Math
X <- c(1, 3, 5, 7, 9, 11)
X*3
sqrt(X)
sum(X)
Y <- c(2,4,6,8,10,12)
X-Y
Z <- c(0,2,4)
X-Z
X-Z
Z2 <- c(0,1,2,3)
X-Z2
# Date Vectors
# Use as.Date( ) to convert strings to dates
mydates <- as.Date(c("2007-06-22", "2004-02-13"))
mydates
typeof(mydates)
# Count number of days between 6/22/07 and 2/13/04
days <- mydates[1] - mydates[2]
days
# Missing Data in R
Z <- c(2, NA, 6, 8, NA, 12)
Z
is.na(Z)
Z <- c(2, NULL, 6, 8, NA, 12)
Z
is.na(Z)
# Useful Vector Functions....
nchar(name)
length(X)
mean(X)
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
# 2-dimensional arrays
theArray2d <- array(1:9, dim=c(3,3))
View(theArray2d)
# Lists
y <- list("a", 1L, 1.5, TRUE)
y[3]
class(y)
typeof(y)
#Display the structure of an R object
str(y)
?str()
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
# Data Frames
x <- 10:1
y <- -4:5
z <- c('Hockey', 'Football', 'Curling', 'Soccer', 'Rugby', 'Baseball', 'Golf', 'Basketball', 'Wrestling', 'Tennis')
theDF <- data.frame(x,y,z)
View(theDF)
theDF
str(theDF)
theDF[1,2]
# Using names
theDF$x
theDF
names(theDF)
# Editing names
names(theDF)<-c("Popularity", "Team Strength", "Sport")
View(theDF)
# Summary of referencing data frame elements
theDF[2:3]
theDF[c(1,3)]
theDF[3]
theDF$Sport
theDF["Sport"]
theDF$Team Strength
theDF$"Team Strength"
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
