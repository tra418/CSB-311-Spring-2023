library(readr)
PakistanSuicideAttacks_Ver_11_30_November_2017_ <- read_csv("Data/PakistanSuicideAttacks Ver 11 (30-November-2017).csv")
View(PakistanSuicideAttacks_Ver_11_30_November_2017_)
theDF[c(1,3)]
theDF[3]
# Numeric
x = 7
# Use better assignment operator
y <- 8
# Using "=" for all things
relationship = lm(formula=y~x)
# Using "<-" for assignment
relationship <- lm(formula=y~x)
# Display value of x in console
x
# Display value of x in console
x
# Looking at the attributes of X
class(x)
typeof(x)
length(x)
attributes(x)
# Assigning a value as an integer
y <- 8L
class (y)
# Converting a numeric value to an integer
y <- 8
class(y)
typeof(y)
y <- as.integer(y)
class(y)
typeof(y)
# How to programmatically clear console
cat("\014")
# Character
Name <- "Troy"
class(Name)
typeof(Name)
length(Name)
# Logical
CheckFlag <- T
class(CheckFlag)
typeof(CheckFlag)
# Integer
y
class(y)
typeof(y)
#date()
DateTime <- date()
class(DateTime)
typeof(DateTime)
#Sys.Date
Date <- Sys.Date()
class(Date)
typeof(Date)
AgeYears = AgeDays/365
#Differences in dates
AgeDays = as.double(Sys.Date() - as.Date("2000-01-01"))
AgeYears = AgeDays/365
#Sys.time
Time <- Sys.time()
class(Time)
typeof(Time)
# Programmatically clear the Console
cat("\014")
# How to programmatically remove all variables from Environment
rm(list=ls(all=TRUE))
# Assign two numbers to variables
x <- 100
y <- 250
z1 <- X + y
z1 <- x + y
z1
z2 <- x - y
z2
z3 <- x * y
z3
z4 <- x / y
z4
z5 <- x ** y
z5
z6 <- x ^ y
z6
# Programmatically remove all variables from Environment
rm(list=ls(all=TRUE))
# Programmatically clear the Console
cat("\014")
Name1 <- "Sirah"
Name2 <- "Johann"
Name3 <- "Yu"
Name <- c(Name1, Name2, Name3)
name <- c("Mike", "Lucy", "John")
name
name[1]
name[2:3]
name[c(1,3)]
# For checking presence:
"Lucy" %in% name
any("Lucy"==name)
is.element("Lucy", name)
# For finding first occurance:
match("Lucy", name)
# For finding all occurances as vector of indices:
which("Lucy" == name)
"Lucy" == name
# Numeric Vectors and Vector Math
X <- c(1, 3, 5, 7, 9, 11)
X*3
sqrt(X)
sum(X)
Y <- c(2,4,6,8,10,12)
X-Y
Z <- c(0,2,4)
X-Z
X-Z
Z2 <- c(0,1,2,3)
X-Z2
# Date Vectors
# Use as.Date( ) to convert strings to dates
mydates <- as.Date(c("2007-06-22", "2004-02-13"))
mydates
typeof(mydates)
# Count number of days between 6/22/07 and 2/13/04
days <- mydates[1] - mydates[2]
days
# Missing Data in R
Z <- c(2, NA, 6, 8, NA, 12)
Z
is.na(Z)
Z <- c(2, NULL, 6, 8, NA, 12)
Z
is.na(Z)
# Useful Vector Functions....
nchar(name)
length(X)
mean(X)
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
# 2-dimensional arrays
theArray2d <- array(1:9, dim=c(3,3))
View(theArray2d)
# Lists
y <- list("a", 1L, 1.5, TRUE)
y[3]
class(y)
typeof(y)
#Display the structure of an R object
str(y)
?str()
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
# Data Frames
x <- 10:1
y <- -4:5
z <- c('Hockey', 'Football', 'Curling', 'Soccer', 'Rugby', 'Baseball', 'Golf', 'Basketball', 'Wrestling', 'Tennis')
theDF <- data.frame(x,y,z)
View(theDF)
theDF
str(theDF)
theDF[1,2]
# Using names
theDF$x
theDF
names(theDF)
# Editing names
names(theDF)<-c("Popularity", "Team Strength", "Sport")
View(theDF)
# Summary of referencing data frame elements
theDF[2:3]
theDF[c(1,3)]
theDF[3]
theDF$Sport
theDF["Sport"]
theDF$Team Strength
theDF$"Team Strength"
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
# Lists
y <- list("a", 1L, 1.5, TRUE)
y[3]
# Data Frames
x <- 10:1
y <- -4:5
z <- c('Hockey', 'Football', 'Curling', 'Soccer', 'Rugby', 'Baseball', 'Golf', 'Basketball', 'Wrestling', 'Tennis')
theDF <- data.frame(x,y,z)
theDF
str(theDF)
theDF[1,2]
View(theDF)
# Using names
theDF$x
theDF$x[3]
names(theDF)
# Editing names
names(theDF)<-c("Popularity", "Team Strength", "Sport")
names(theDF)
# Summary of referencing data frame elements
theDF[2:3]
theDF[c(1,3)]
theDF[3]
theDF$Sport
theDF["Sport"]
theDF$Team Strength
theDF$"Team Strength"
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
name <- c("Mike", "Lucy", "John")
if (name=="Lucy") {
print("Name Matched")
} else {
print("Name NOT Matched")
}
if (name=="Mike") {
print("Name Matched")
} else {
print("Name NOT Matched")
}
ifelse(name=="Lucy","Name Matched","Name NOT Matched")
ifelse(name=="John",1,0)
# Programmatically remove all variables from Environment
rm(list=ls(all=TRUE))
# Programmatically clear the Console
cat("\014")
name <- c("Mike", "Lucy", "John", "Lucy")
age <- c(7,34,57,9)
name <- c("Mike", "Lucy", "John", "Lucy")
age <- c(7,34,57,9)
# Set n equal to the number of elements in the name vector
n<-length(name)
for (i in 1:n) {
if(name[i]=="Lucy") {
print(age[i])
} else {}
}
## Going to be reading in a lot of data, so let's empty Environment
## and clean up Console
# Clean Up
rm(list=ls(all=TRUE))
cat("\014")
## Reading in external data
## Prior to attempting this section, download file
## "yellow-tripdata_2017-06.csv" from the link on intro-to-r.com
## and store it in the /Data subfolder for this project.
if (!require("here")) install.packages("here")
library("here")
# Also, edit the .gitignore file (if necessary) to exclude
# *.csv and *.RData files from being synced by Git.
file.edit(".gitignore")
ptm <- proc.time()
DF <- read.csv(here("Data","yellow_tripdata_2017-06.csv"))
CSV_READ_TIME <- (proc.time() - ptm)
CSV_READ_TIME
# Looking at what we got
class(DF)
typeof(DF)
str(DF)
View(DF)
## Reading in our csv file using fread() from package data.table
# Installing data.table (if required) and loading it into memory
if (!require("data.table")) install.packages("data.table")
library("data.table")
#Checking and setting number of cpu threads
getDTthreads()
getDTthreads(verbose=TRUE)
setDTthreads(0)
getDTthreads()
ptm <- proc.time()
DF <- fread(here("Data","yellow_tripdata_2017-06.csv"), header="auto",
data.table=FALSE)
FREAD_READ_TIME <- (proc.time() - ptm)
FREAD_READ_TIME
# Examining what we got
class(DF)
typeof(DF)
str(DF)
ptm <- proc.time()
header <- read.table(here("Data","yellow_tripdata_2017-06.csv"), header = TRUE,
sep=",", nrow = 1)
DF <- fread(here("Data","yellow_tripdata_2017-06.csv"), skip=1, sep=",",
header=FALSE, data.table=FALSE)
setnames(DF, colnames(header))
rm(header)
FREAD_READ_TIME <- (proc.time() - ptm)
FREAD_READ_TI
ptm <- proc.time()
header <- read.table(here("Data","yellow_tripdata_2017-06.csv"), header = TRUE,
sep=",", nrow = 1)
DF <- fread(here("Data","yellow_tripdata_2017-06.csv"), skip=1, sep=",",
header=FALSE, data.table=FALSE)
setnames(DF, colnames(header))
rm(header)
FREAD_READ_TIME <- (proc.time() - ptm)
FREAD_READ_TIME
# Examining what we got again
class(DF)
typeof(DF)
str(DF)
# Examing the effects of multithreading
for(i in 1:getDTthreads()) {
setDTthreads(i)
print(getDTthreads())
ptm <- proc.time()
header <- read.table(here("Data","yellow_tripdata_2017-06.csv"), header = TRUE,
sep=",", nrow = 1)
DF <- fread(here("Data","yellow_tripdata_2017-06.csv"), skip=1, sep=",",
header=FALSE, data.table=FALSE,
showProgress=FALSE)
setnames(DF, colnames(header))
rm(header)
print(proc.time() - ptm)
gc()
}
# Installing readr (if required) and loading it into memory
if (!require("readr")) install.packages("readr")
library("readr")
ptm <- proc.time()
DF <- read_csv(here("Data","yellow_tripdata_2017-06.csv"), col_names=TRUE)
install.packages("tidyverse")
install.packages("tidyverse")
ptm <- proc.time()
DF <- read_csv(here("Data","yellow_tripdata_2017-06.csv"), col_names=TRUE)
library(tidyverse)
ptm <- proc.time()
DF <- read_csv(here("Data","yellow_tripdata_2017-06.csv"), col_names=TRUE)
library("here")
ptm <- proc.time()
DF <- read_csv(here("Data","yellow_tripdata_2017-06.csv"), col_names=TRUE)
READR_READ_TIME <- (proc.time() - ptm)
READR_READ_TIME
class(DF)
typeof(DF)
str(DF)
# We've picked a winner: let's run with it.
rm(list=ls(all=TRUE))
cat("\014")
header <- read.table(here("Data","yellow_tripdata_2017-06.csv"), header = TRUE,
sep=",", nrow = 1)
Yellow_Tripdata_2017_06 <- fread(here("Data","yellow_tripdata_2017-06.csv"),
skip=1, sep=",",header=FALSE,
data.table=FALSE)
setnames(Yellow_Tripdata_2017_06, colnames(header))
rm(header)
## Reading in our csv file using fread() from package data.table
# Installing data.table (if required) and loading it into memory
if (!require("data.table")) install.packages("data.table")
library("data.table")
#Checking and setting number of cpu threads
getDTthreads()
getDTthreads(verbose=TRUE)
setDTthreads(0)
getDTthreads()
header <- read.table(here("Data","yellow_tripdata_2017-06.csv"), header = TRUE,
sep=",", nrow = 1)
Yellow_Tripdata_2017_06 <- fread(here("Data","yellow_tripdata_2017-06.csv"),
skip=1, sep=",",header=FALSE,
data.table=FALSE)
setnames(Yellow_Tripdata_2017_06, colnames(header))
rm(header)
# Looking at our data
View(Yellow_Tripdata_2017_06)
str(Yellow_Tripdata_2017_06)
# Using head()
head(Yellow_Tripdata_2017_06)
head(Yellow_Tripdata_2017_06, n=3)
head(Yellow_Tripdata_2017_06$trip_distance, n=10)
head(Yellow_Tripdata_2017_06[4:5])
# Using summary()
summary(Yellow_Tripdata_2017_06)
#
# Throwing out "non-fares"
Yellow_Tripdata_2017_06 <- Yellow_Tripdata_2017_06[which(
Yellow_Tripdata_2017_06$fare_amount>=0 &
Yellow_Tripdata_2017_06$fare_amount<100000),]
summary(Yellow_Tripdata_2017_06 $ fare_amount)
# Constraining passenger_count to = 1 or 2
Yellow_Tripdata_2017_06<-Yellow_Tripdata_2017_06[which(
Yellow_Tripdata_2017_06$passenger_count==1 |
Yellow_Tripdata_2017_06$passenger_count==2),]
summary(Yellow_Tripdata_2017_06 $ passenger_count)
# Using data.table:fwrite()to save our curated data as csv:
fwrite(Yellow_Tripdata_2017_06,"Yellow_Curated.csv")
# First, clear memory and the Console
rm(list=ls(all=TRUE))
cat("\014")
# Re-read the csv:
header <- read.table(here("Data","yellow_tripdata_2017-06.csv"), header = TRUE,
sep=",", nrow = 1)
DF <- fread(here("Data","yellow_tripdata_2017-06.csv"),
skip=1, sep=",",header=FALSE,
data.table=FALSE)
setnames(DF, colnames(header))
rm(header)
# Save the "bad" observations so we can clean them out
# in the next chapter
DF2<-DF[which(DF$total_amount<=0 |
DF$fare_amount >=100000 |
DF$fare_amount < 0 |
DF$trip_distance >= 100),]
# Reform DF with only the "good" observations
DF<-DF[which(DF$total_amount >0 &
DF$fare_amount <100000 &
DF$fare_amount >= 0 &
DF$trip_distance < 100),]
# Select a random subsample of 1,000,000 rows
set.seed(10)
index <- sample(1:nrow(DF), 1000000, replace=FALSE)
# Look at the index to see it's just row numbers
head(index)
# Copy the row numbers for the sample only into Yellow_Sample
Yellow_Sample <- DF[index,]
# Concatenate (or "bind") the random sample and the "bad" ones
Yellow_Sample <- rbind(DF2,Yellow_Sample)
# Save the data frame as an R data file
save(Yellow_Sample,file=here("Data","Yellow_Sample.RData"))
# First, clear memory and the Console
rm(list=ls(all=TRUE))
cat("\014")
library(here)
# Load the previously referenced data frame in "Yellow_Sample.RData"
load(here("Data","Yellow_Sample.RData"))
str(Yellow_Sample)
library("validate")
# Let's examine Yellow_Sample to remind us what's in it...
# Trick to list column names, numbered and vertically
as.data.frame(colnames(Yellow_Sample))
str(Yellow_Sample)
summary(Yellow_Sample)
# Let's add a new variable with sequential IDs for each row
Yellow_Sample$id<-seq.int(nrow(Yellow_Sample))
View(Yellow_Sample)
# Now we'll check to see that the new "id" variable has been added...
str(Yellow_Sample$id)
# attach() will place the data frame name into the search path, meaning that
# for many functions we can dispense with using the whole data frame name.
attach(Yellow_Sample)
# Now we can actually start using the validate package.
# validator() will take desired rules as inputs...
v <-  validator( trip_distance<100,
fare_amount>=0,
fare_amount<100000,
total_amount>0)
v
# What class/type is v?
class(v)
typeof(v)
# Now, we "confront()" our data with that set of rules, specifying our unique key
cf <- confront(Yellow_Sample,v,key="id")
cf
# Let's put the cf into a data frame object to see if we can see more about it...
out <- as.data.frame(cf)
View(out)
# If we merge this with the original data, will get >4M rows...why?
rm(out)
v1<-validator(trip_distance<100)
v1
cf1<-confront(Yellow_Sample,v1,key="id")
out1<-as.data.frame(cf1)
View(out1)
v2<-validator(fare_amount>=0)
v2
cf2<-confront(Yellow_Sample,v2,key="id")
out2<-as.data.frame(cf2)
v3<-validator(fare_amount<100000)
v3
cf3<-confront(Yellow_Sample,v3,key="id")
out3<-as.data.frame(cf3)
v4<-validator(total_amount>0)
v4
cf4<-confront(Yellow_Sample,v4,key="id")
out4<-as.data.frame(cf4)
View(out1)
View(out2)
# Now, to keep each validation rule and result clear...
names(out1)
names(out1)[3]<-"TD.LT.100"
names(out1)
names(out2)[3]<-"FARE.GE.0"
names(out3)[3]<-"FARE.LT.100000"
names(out4)[3]<-"AMT.GT.0"
# Now to merge the results of the confrontation with Yellow_Sample
# We'll start with "out1"....
YT_Sample_Validated <- merge(out1,Yellow_Sample, by.x="id",by.y="id")
head(YT_Sample_Validated,1)
# " ... and we'll use "subset" to drop "name" and "expression"...
YT_Sample_Validated <- subset(YT_Sample_Validated,select=-c(name,expression))
head(YT_Sample_Validated,1)
# Next, merge "out2" into our (working) merged data frame, YT_Sample_Validated....
YT_Sample_Validated <- merge(out2,YT_Sample_Validated, by.x="id",by.y="id")
YT_Sample_Validated <- subset(YT_Sample_Validated,select=-c(name,expression))
# Next, merge "out3" into our (working) merged data frame, YT_Sample_Validated....
YT_Sample_Validated <- merge(out3,YT_Sample_Validated, by.x="id",by.y="id")
YT_Sample_Validated <- subset(YT_Sample_Validated,select=-c(name,expression))
# Finally, merge "out4" into our (working) merged data frame, YT_Sample_Validated....
YT_Sample_Validated <- merge(out4,YT_Sample_Validated, by.x="id",by.y="id")
YT_Sample_Validated <- subset(YT_Sample_Validated,select=-c(name,expression))
# And let's take a look at what it looks like:
str(YT_Sample_Validated)
# Finally, save our validated data set for the next module...
save(YT_Sample_Validated,file=here("Data","YT_Sample_Validated.RData"))
## Dealing with data that needs to be changed and deleted
# Clear out Console and Enviroment
rm(list=ls(all=TRUE))
cat("\014")
DF <- read.csv("PakistanSuicideAttacks Ver 11 (30-November-2017).csv")
DF <- read.csv(here("Data",PakistanSuicideAttacks Ver 11 (30-November-2017).csv"))
DF <- read.csv(here("Data","PakistanSuicideAttacks Ver 11 (30-November-2017).csv"))
library(here)
DF <- read.csv(here("Data","PakistanSuicideAttacks Ver 11 (30-November-2017).csv"))
